// <auto-generated />
using System;
using ADMitroSremEmploye.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ADMitroSremEmploye.Data.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20240920061859_DeletePovratnicaMigration")]
    partial class DeletePovratnicaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.AnnualLeave", b =>
                {
                    b.Property<Guid>("AnnualLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ApprovalDate")
                        .HasColumnType("date");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCarryOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSickLeave")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("UsedDays")
                        .HasColumnType("int");

                    b.HasKey("AnnualLeaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmployeId");

                    b.ToTable("AnnualLeaves");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditLogId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.Employe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AmendmentContract")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("College")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfEmployment")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EmployeBankAccount")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("EmploymentContract")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameOfParent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PIO")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Employe");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeChild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid?>("EmployeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeId");

                    b.ToTable("EmployeChild");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CalculationMonth")
                        .HasColumnType("date");

                    b.Property<decimal>("Credits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DamageCompensation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EmployeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("HolidayBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HoursOfAnnualVacation")
                        .HasColumnType("int");

                    b.Property<decimal>("MealAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OvertimeHours")
                        .HasColumnType("int");

                    b.Property<DateOnly>("SettlementDate")
                        .HasColumnType("date");

                    b.Property<int>("Sickness100")
                        .HasColumnType("int");

                    b.Property<int>("Sickness60")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumberOfHours")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumberOfWorkingHours")
                        .HasColumnType("int");

                    b.Property<int>("WorkingHoursForTheHoliday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmployeSalary");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeSalarySO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeductionHealth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeductionPension")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EmployeSalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExpenseOfTheEmployer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeSalaryId")
                        .IsUnique();

                    b.ToTable("EmployeSalarySO");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeSalarySOE", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeductionHealth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeductionPension")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeductionTaxRelief")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeductionUnemployment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EmployeSalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExpenseOfTheEmploye")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetoSalary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeSalaryId")
                        .IsUnique();

                    b.ToTable("EmployeSalarySOE");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.IncomeFromWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AnnualVacation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Credit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Demage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EmployeSalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrossSalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HolidayHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HotMeal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinuliRad")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OvertimeHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Regres")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sickness100")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sickness60")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WorkinHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeSalaryId")
                        .IsUnique();

                    b.ToTable("IncomeFromWork");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Dokument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BrojDokumenta")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("DatumDokumenta")
                        .HasColumnType("datetime2");

                    b.Property<string>("NazivDokumenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dokument");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.IzlazniPodaci", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CenaBezPdv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IzlaznaKolicina")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("IzlaznaVrednost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PDV")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PdvUDin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProizvodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProizvodId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Otpremnica.Otpremnica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrojFiskalnogRacuna")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Paritet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.ToTable("Otpremnica");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Racun.Racun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrojFiskalnogRacuna")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KomintentiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaticniBroj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PIB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paritet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Primalac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("KomintentiId");

                    b.ToTable("Racun");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Komintenti", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Komintent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Komintenti");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Proizvod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CenaProizvoda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CenaProizvodaBezPdv")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("JM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivProizvoda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivProizvodaZaPrikaz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoreskaGrupa")
                        .HasColumnType("int");

                    b.Property<string>("SifraProizvoda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ZaliheProizvoda")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.ToTable("Proizvod");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Kalkulacija.Kalkulacija", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KomintentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("KomintentId");

                    b.ToTable("Kalkulacija");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Prijemnica.Prijemnica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KomintentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("KomintentId");

                    b.ToTable("Prijemnica");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.UlazniPodaci", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProizvodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UlaznaKolicina")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("UlaznaVrednost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProizvodId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.StateObligation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<decimal>("HealthCare")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PIO")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("StateObligation");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StateObligation");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("84378c0f-9112-494d-b4f2-90be52f5872c"),
                            HealthCare = 0.0515m,
                            PIO = 0.10m
                        });
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Otpremnica.OtpremnicaStavke", b =>
                {
                    b.HasBaseType("ADMitroSremEmploye.Models.Domain.MP.Izlaz.IzlazniPodaci");

                    b.Property<Guid?>("OtpremnicaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OtpremnicaId");

                    b.ToTable("OtpremnicaStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Racun.RacunStavke", b =>
                {
                    b.HasBaseType("ADMitroSremEmploye.Models.Domain.MP.Izlaz.IzlazniPodaci");

                    b.Property<Guid?>("RacunId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RacunId");

                    b.ToTable("RacunStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Kalkulacija.KalkulacijaStavke", b =>
                {
                    b.HasBaseType("ADMitroSremEmploye.Models.Domain.MP.Ulaz.UlazniPodaci");

                    b.Property<decimal>("CenaProizvodaBezPdv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CenaProizvodaSaPdv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("KalkulacijaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Kolicina")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("NabavnaCena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NabavnaVrednost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PDV")
                        .HasColumnType("int");

                    b.Property<decimal>("PdvUDin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UlaznaCena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VrednostRobeBezPdv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VrednostRobeSaPdv")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("KalkulacijaId");

                    b.ToTable("KalkulacijaStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Prijemnica.PrijemnicaStavke", b =>
                {
                    b.HasBaseType("ADMitroSremEmploye.Models.Domain.MP.Ulaz.UlazniPodaci");

                    b.Property<Guid?>("PrijemnicaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PrijemnicaId");

                    b.ToTable("PrijemnicaStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.StateObligationsEmploye", b =>
                {
                    b.HasBaseType("ADMitroSremEmploye.Models.Domain.StateObligation");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRelief")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Unemployment")
                        .HasColumnType("decimal(18,4)");

                    b.HasDiscriminator().HasValue("StateObligationsEmploye");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc26fd51-51ca-4482-a30b-80776f813d52"),
                            HealthCare = 0.0515m,
                            PIO = 0.14m,
                            Tax = 0.10m,
                            TaxRelief = 25000m,
                            Unemployment = 0.0075m
                        });
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.AnnualLeave", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("ADMitroSremEmploye.Models.Domain.Employe", "Employe")
                        .WithMany()
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.AuditLog", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.Employe", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeChild", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.Employe", null)
                        .WithMany("EmployeChild")
                        .HasForeignKey("EmployeId");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeSalarySO", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.EmployeSalary", null)
                        .WithOne("EmployeSalarySO")
                        .HasForeignKey("ADMitroSremEmploye.Models.Domain.EmployeSalarySO", "EmployeSalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeSalarySOE", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.EmployeSalary", null)
                        .WithOne("EmployeSalarySOE")
                        .HasForeignKey("ADMitroSremEmploye.Models.Domain.EmployeSalarySOE", "EmployeSalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.IncomeFromWork", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.EmployeSalary", null)
                        .WithOne("IncomeFromWork")
                        .HasForeignKey("ADMitroSremEmploye.Models.Domain.IncomeFromWork", "EmployeSalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.IzlazniPodaci", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("ProizvodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Otpremnica.Otpremnica", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Dokument", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Racun.Racun", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Dokument", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Komintenti", "Komintenti")
                        .WithMany()
                        .HasForeignKey("KomintentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("Komintenti");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Kalkulacija.Kalkulacija", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Dokument", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Komintenti", "Komintent")
                        .WithMany()
                        .HasForeignKey("KomintentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("Komintent");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Prijemnica.Prijemnica", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Dokument", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Komintenti", "Komintent")
                        .WithMany()
                        .HasForeignKey("KomintentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("Komintent");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.UlazniPodaci", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("ProizvodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMitroSremEmploye.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Otpremnica.OtpremnicaStavke", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Otpremnica.Otpremnica", null)
                        .WithMany("OtpremnicaStavke")
                        .HasForeignKey("OtpremnicaId");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Racun.RacunStavke", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Racun.Racun", null)
                        .WithMany("RacunStavke")
                        .HasForeignKey("RacunId");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Kalkulacija.KalkulacijaStavke", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Kalkulacija.Kalkulacija", null)
                        .WithMany("KalkulacijaStavke")
                        .HasForeignKey("KalkulacijaId");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Prijemnica.PrijemnicaStavke", b =>
                {
                    b.HasOne("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Prijemnica.Prijemnica", null)
                        .WithMany("PrijemnicaStavke")
                        .HasForeignKey("PrijemnicaId");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.Employe", b =>
                {
                    b.Navigation("EmployeChild");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.EmployeSalary", b =>
                {
                    b.Navigation("EmployeSalarySO");

                    b.Navigation("EmployeSalarySOE");

                    b.Navigation("IncomeFromWork");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Otpremnica.Otpremnica", b =>
                {
                    b.Navigation("OtpremnicaStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Izlaz.Racun.Racun", b =>
                {
                    b.Navigation("RacunStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Kalkulacija.Kalkulacija", b =>
                {
                    b.Navigation("KalkulacijaStavke");
                });

            modelBuilder.Entity("ADMitroSremEmploye.Models.Domain.MP.Ulaz.Prijemnica.Prijemnica", b =>
                {
                    b.Navigation("PrijemnicaStavke");
                });
#pragma warning restore 612, 618
        }
    }
}
